name: CIGradingTest
on:
  workflow_call:
  # push:
  #   branches:
  #   - main

jobs:
  ci-test:
    runs-on: ubuntu-20.04
    container:
      image: trungisondockerhub/lntc_hk232_env_test2:latest
      credentials:
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_KEY }}

    steps:
      - run: ls /opt/

      - uses: actions/checkout@v3

      - name: preparation script files
        run: bash /prepare_script_files.sh ${GITHUB_WORKSPACE}

      - name: check dir
        run: ls

      - name: main execution flow
        run: bash workflow.sh

      # - name: Haskell Main.hs code - Will be Built into Docker Image Later Instead of Download Like This
      #   run: curl -o ./app/Main.hs https://raw.githubusercontent.com/trungIsOnGithhub/CIgradingTest/main/Main.hs

      # - name: PreRun script - Will be Built into Docker Image Later Instead of Download Like This
      #   run: curl -o ./pre.js https://raw.githubusercontent.com/trungIsOnGithhub/CIgradingTest/main/mock-server/pre.js

      # - name: PostRun script - Will be Built into Docker Image Later Instead of Download Like This
      #   run: curl -o ./post.js https://raw.githubusercontent.com/trungIsOnGithhub/CIgradingTest/main/mock-server/post.js

      # - name: Run Pre Test - Prepare Input For Haskell Run - Where To Store API Key??
      #   run: API_KEY=NR23lHuWdW6R7zrBe5kqa-mKviTOPPnFF0GQEohuy14HAzFuXTtO-g== node ./pre.js

      # - name: test download error handler
      #   run: curl -o ./catch_err.js https://raw.githubusercontent.com/trungIsOnGithhub/CIgradingTest/main/catch_err.js

      # - run: ls ${GITHUB_WORKSPACE}/app
      # - run: ls ${GITHUB_WORKSPACE}

      # - run: ls

      # - run: mv /opt/Main.hs ./app/

      # - run: mv /opt/mock-server ./

      # - run: ls

      # - name: Run Main.hs to Test Officially
      #   run: node catch_err.js

      # - name: Run Post Test - Show JSON Execute Result Request To Sent To Server
      #   run: GH_USRNAME=${{github.actor}} node ./post.js

      # - run: ls ${GITHUB_WORKSPACE}
      # - run: ls ${GITHUB_WORKSPACE}/app
# - run: ls ${GITHUB_WORKSPACE}/app
# pytest:
#   runs-on: ubuntu-latest
#   container: nikolaik/python-nodejs:python3.11-nodejs18-alpine
#   steps:
#     - run: apt-get update
#     - run: apt-get -qq install lsof
#     - run: node server.js &
#     - run: kill -9 $(lsof -t -i:5000)
